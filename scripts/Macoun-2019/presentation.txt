framework:Slides3D load.       

   
class ImageSlide : ASCSlide { 
     var text.
     var image.
     var imageURL.
     var imageScale.
     var xOffset.
     -<void>setupSlideWithPresentationViewController:controller {
       self textManager setTitle:self text.
       shapeGroup := SCNNode node.
       self rootNode addChildNode:shapeGroup.
       image := NSImage alloc initWithContentsOfFile:self imageURL.
       size := image size.
       size := size * self imageScale .
       boxer := ASCBoxMaker new.
       boxer setP: ( (self xOffset - 8 ) @ 0.2 ).
       boxer setColor: (NSColor grayColor).  
       boxer setPosition: 0@0 .
       boxer setHeight: size y. 
       boxer setYHeight:3.5. 
       boxer setPadding:10. 
       imageBox :=  boxer box:'' width: size x.
       imageBox geometry materials firstObject diffuse setContents: image.
       shapeGroup addChildNode: imageBox.
     }
}
 
        
  
class ObjCAndSmalltalk : ASCSlide {
   var c.
   var Smalltalk.
   var shapeGroup.
   var steps.

   -<int>numberOfSteps {
       self steps intValue.
   }

   -<void>setupSlideWithPresentationViewController:controller {
       self textManager setTitle:''.
       shapeGroup := SCNNode node.
       self setShapeGroup:shapeGroup.
       self rootNode addChildNode:shapeGroup.
       boxer := ASCBoxMaker new.
       boxer setP: ( -8 @ 6.2 ).
       boxer setColor: (NSColor colorWithDeviceRed:145.0 / 255.0 green:145.0 / 255.0 blue:253.0 / 255.0 alpha:1 ).  
       boxer setPosition: 0@0 .
       boxer setHeight:40. 
       boxer setYHeight:5.0. 
       boxer setPadding:10. 
       Smalltalk := boxer  box:'Smalltalk' width:500 color:(NSColor redColor).
       self setSmalltalk:Smalltalk.
       shapeGroup addChildNode:Smalltalk.
       boxer nextLine.
       boxer setHeight:240.
       boxer setFontSize:200. 
       stdout println:'font size: ', boxer fontSize stringValue.
       c :=  boxer box:'C' width:500.
       self setC:c.
       shapeGroup addChildNode:c.
       boxer setPadding:20. 
   }
    -<void>presentStepIndex:<int>index withPresentionViewController:controller {
       index = 0 ifTrue:{ 
            SCNTransaction setAnimationDuration:1.5.
         }.
         index = 1 ifTrue:{ 
            SCNTransaction begin.
            self c setXYPosition: -40.0  @ 1.20 .
            SCNTransaction commit.
         }.
     }
}.    
      
class ProgramVsSystem : ASCSlide {
   var code.
   var system.
   var problem.
   var tools.
   var shapeGroup.

   -<void>setupSlideWithPresentationViewController:controller {
       self textManager setTitle:'Programmtext vs. System'.
       self textManager addBullet:'FORTRAN' atLevel:0.
       shapeGroup := SCNNode node.
       self setShapeGroup:shapeGroup.
       self rootNode addChildNode:shapeGroup.
       boxer := ASCBoxMaker new.
       boxer setP: ( -8 @ 0.2 ).
       boxer setColor: (NSColor colorWithDeviceRed:105 / 255.0 green:145.0 / 255.0 blue:14.0 / 255.0 alpha:1 ).  
       boxer setPosition: 0@0 .
       boxer setHeight:120. 
       boxer setYHeight:1.5. 
       boxer setPadding:10. 
       code :=  boxer box:'Code' width:160.
       self setCode:code.
       boxer setPadding:20. 

       system := boxer  box:'System' width:160 color:(NSColor blueColor).
       self setSystem:system.

       problem := boxer box:'Problem' width:160 color:(NSColor redColor).
       self setProblem: problem.

       shapeGroup do addChildNode: #( code, system, problem ) each.
 
   }

   -<int>numberOfSteps {  8. }
 
   -<void>presentStepIndex:<int>index withPresentionViewController:controller {
         index = 0 ifTrue:{ 
            SCNTransaction setAnimationDuration:1.5.
         }.
         index = 1 ifTrue:{ 
            SCNTransaction begin.
            self textManager addBullet:'Non-Computation' atLevel:0.
            self problem setXYPosition: -3.0  @ 0.20 .
            SCNTransaction commit.
         }.
           index = 2 ifTrue:{ 
            SCNTransaction begin.
            self textManager addBullet:'OOP' atLevel:0.
            self system setXYPosition: -3.0 @ 0.20 .
            SCNTransaction commit.
         }.
       index = 3 ifTrue:{
            SCNTransaction begin.
            self textManager addBullet:'Ruby' atLevel:0.
            self code setXYPosition: -14.0  @ 0.20 .
            SCNTransaction commit.
         }.
       index = 4 ifTrue:{
            SCNTransaction begin.
            self code setXYPosition: -8.0  @ 0.20 .
            SCNTransaction commit.
         }.
       index = 5 ifTrue:{
            SCNTransaction begin.
            self textManager addBullet:'FP' atLevel:0.
            self system setXYPosition: -8.0  @ 0.20 .
            SCNTransaction commit.
         }.
         index = 6 ifTrue:{
            SCNTransaction begin.
            self system setXYPosition: -3.0  @ 0.20 .
            SCNTransaction commit.
         }.
         index = 7 ifTrue:{
            SCNTransaction begin.
            self textManager addBullet:'Objective-Smalltalk' atLevel:0.
            self code setXYPosition: -3.0  @ 0.20 .
            SCNTransaction commit.
         }.
   }
}
                    
  
 
controller := #ASCPresentationViewController{
    #Name : 'Objective-Smalltalk: Macoun 2019'.
    #Slides : #(
       #ASCChapterSlide { 
               #text : 'Objective-Smalltalk'.
               #subtitle : 'Marcel Weiher (@mpweiher)'
         }  ,


       #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk'.
             #bullets : #( 
                'Variante von Smalltalk',
                'Objective-C kompatibel',
                'Skript- und Programmiersprache',
                'Architekturorientierte Konzepte',
                'Frameworks, Sprache, Tools',
             )
        } ,

      #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk'.
             #bullets : #( 
                'Motivation',
                'Die Sprache',
             )
        } ,
       #ASCChapterSlide { 
               #text : 'Motivation'.
               #subtitle : 'Objective-Smalltalk'
         }    ,
      #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk: Motivation'.
             #bullets : #( 
                'Scripting',
                'Sprachvereinfachung',
                'Programmvereinfachung',
             )
        } ,
        #ASCChapterSlide { 
               #text : 'Scripting'.
               #subtitle : 'Objective-Smalltalk: Motivation'
         }    ,

      #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk: Scripting'.
             #bullets : #( 
                'Scripted Components / Software-ICs',
                'Kleine Systeme werden groß',
                'WebScript',
            )
        } ,
      #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk: Scripting'.
             #bullets : #( 
                'Applikationen?',
                'Shell Scripts?',
                'Web Server?',
                'Naked Objects',
            )
        } ,
      #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk: Framework-Scripting'.
             #bullets : #( 
                'App = Framework + Script',
                'Shell Script = Framework + Script',
                'Web Server = Framework + Script',
                'Neues Framework = Framework + Script?',
            )
        } ,
        #ASCChapterSlide { 
               #text : 'Sprachvereinfachung'.
               #subtitle : 'Objective-Smalltalk: Motivation'
         }    ,
       #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk: Sprachvereinfachung'.
             #bullets : #( 
                'C ist groß',
                'Smalltalk is klein',
             )
        } ,

         #ObjCAndSmalltalk { 
              #lightIntensities : #( 0.2 , 0.7 )
         }  ,
          #ASCBulletSlide{ 
             #title : 'Objective-C: Überlappungen'.
             #bullets : #( 
                'Syntax:  []',
                'C Array / Objective-C Array',
                'C String / NSString',
                'int,float  / NSNumber',
                'Literale / @Literale',
                'struct / Klasse',
                'Funktionen / Methoden',
                '{Blöcke} / ^{Blöcke}'
            )
        } ,
         #ASCBulletSlide{ 
             #title : 'C → Smalltalk'.
             #bullets : #( 
                'Kontrollstrukturen:  Messages',
                'Array Syntax: Messages',
                'Operatoren: Messages',
                'Nur eine Art von Block',
            )
        } ,

     #ASCChapterSlide { 
               #text : 'Programmvereinfachung'.
               #subtitle : 'Objective-Smalltalk: Motivation'
         }    ,
         
         #ASCBulletSlide{ 
             #title : 'Programmvereinfachung'.
             #bullets : #( 
                'Wunderlist iOS client: 160 KLOC',
                'Microsoft Office:  400 MLOC',
            )
        } ,
         #ASCBulletSlide{ 
             #title : 'Programmvereinfachung'.
             #bullets : #( 
                'Programmiersprachen sind prozedural',
                'Unsere Aufgaben sind es nicht',
                'Lücke zwischen Programmtext und System',
            )
        } ,
        #ASCBulletSlide{ 
             #title : 'Programmvereinfachung'.
             #bullets : #( 
                'Programmiersprachen sind prozedural',
                'Vor allem die Abstraktionsmechanismen',
                'Unsere Aufgaben sind es nicht',
            )
        } ,
        #ASCBulletSlide{ 
             #title : 'Zitate'.
             #bullets : #( 
                'Feynnman:  "Computers don''t compute"',
                'Guy Steele: "No longer about termination"',
                'A. Black: "Communication, not computation"',
            )
        } ,
         #ProgramVsSystem { 
              #lightIntensities : #( 0.2 , 0.7 )
         }  ,


     #ASCChapterSlide { 
               #text : 'Objective-Smalltalk'.
               #subtitle : 'Objective-Smalltalk'
         }    ,


       #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk'.
             #bullets : #( 
                'Sprache',
                "Frameworks",
                'Weeerkzeuge',
             )
        } ,
     #ASCChapterSlide { 
               #text : 'Sprache'.
               #subtitle : 'Objective-Smalltalk'
         }    ,

       #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk: Sprache'.
             #bullets : #( 
                'Smalltalk',
                "+ Syntax Verbesserungen",
                '+ Architekturkonzepte',
             )
        } ,

       #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk: Syntax'.
             #bullets : #( 
                'Klassendefinition',
                'Extensions',
                'Methodendefition',
                '{} für Blöcke, statt []',
                'Objektliterale',
                '<types>',
             )
        } ,
     #ASCChapterSlide { 
               #text : 'Architekturkonzepte'.
               #subtitle : 'Objective-Smalltalk'
         }    ,

       #ASCBulletSlide{ 
             #title : 'Objective-Smalltalk: Architekturkonzepte'.
             #bullets : #( 
                'Stores und Polymorphic Identifiers',
                'Objektfilter',
                'HOM',
             )
        } ,


       #ASCBulletSlide{ 
             #title : 'Polymorphic Identifiers'.
             #bullets : #( 
                'Alle Namen sind URIs',
                "var:hello := 'World!",
                "Pfadnavigation, Rekursion",
                'file:{env:HOME}/Downloads/site := http://objective.st',
                'Werden durch "Stores" ausgewertet',
             )
        } ,

       #ASCBulletSlide{ 
             #title : 'Stores'.
             #bullets : #( 
                'Wie in-process REST Server',
                'Oder Dictionaries',
                'Lokale Variablen, Environmentvariablen',
                'Dateisystem, HTTP',
                'Datenbanken: SQL/SQLite',

             )
        }  ,
 
       #ASCBulletSlide{ 
             #title : 'Storage Combinators'.
             #bullets : #( 
                'Onward! ''19',
             )
        } ,


      #ImageSlide{ 
               #text : 'Storage Combinator: Platte und Speicher'.
               #imageURL : '/Users/marcel/Documents/Writing/Dissertation/Papers/StorageCombinators/disk-cache-json-aligned.png'.
               #xOffset : 2.0 .
               #imageScale : 0.8
         }  , 
    #ImageSlide{ 
               #text : 'Storage Combinator: Asynchrones Schreiben'.
               #imageURL : '/Users/marcel/Documents/Writing/Dissertation/Papers/StorageCombinators/async-writer.png'.
               #xOffset : 2.0 .
               #imageScale : 0.6
         }  ,
      )
  }. 
           
controller view openInWindow:'Objective-Smalltalk (Objective-Smalltalk Macoun 2019)'.
 


controller numberOfSlides  

framework:EGOS load.
framework:EGOS_Cocoa load.
  

size := controller view frame size  .

outfile := MPWByteStream fileName:'/tmp/presentation.pdf'.     
pageDict := NSDictionary dictionary. 

pdfstream := MPWCGPDFContext pdfContextWithTarget:outfile size:size.     

{ controller  isAtEnd not } whileTrue: {
    
    image := controller view snapshot.  
    image lockFocus.
    bitmapRep := NSBitmapImageRep alloc initWithFocusedViewRect: (0@0 extent: image size).
    image unlockFocus.
    pdfstream beginPage: pageDict.
    pdfstream scale: 0.5.
    pdfstream drawImage:image .
    pdfstream endPage .

     controller goToNextSlideStep. 
     NSThread sleepForTimeInterval:3.
} 
 .
pdfstream close. 
outfile close. 
 nil        
  
NSCGImageSnapshotRep superclass 

controller goToSlideAtIndex:12  nil

size := controller view frame size.  

framework:EGOS_Cocoa load 

(0 to:38) do: { :i |

    image := NSBitmapImageRep alloc initWithData: file:/tmp/pages/{i} .
    stdout println:image.
    pdfstream scale: 0.5.
    pdfstream drawImage:image .
    pdfstream endPage .
}  
.
pdfstream close. 
outfile close. 

